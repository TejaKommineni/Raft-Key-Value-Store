package main

import "os"
import "fmt"
import "mapreduce"
import "unicode"
import "strconv"
import "sort"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	var mapValues[] mapreduce.KeyValue
        //begin,i := 0,0
        s := ""
        
        for i:=0 ;i<len(value);i++ {
        //val, _ := strconv.Atoi(contents[i:i+1])
        if unicode.IsLetter(rune(value[i])){
                s = s+ string(value[i])
        }else {
          if len(s)>0 {
            temp := mapreduce.KeyValue{s, document}
            mapValues = append(mapValues, temp)
            }
            s = ""
          }

        }
        if len(s)>0 {
            temp := mapreduce.KeyValue{s,document}
            mapValues = append(mapValues, temp)
            }
	return mapValues
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	
	docSeen := make(map[string]int)
        for i:=0;i<len(values);i++{
                val, ok := docSeen[values[i]]
		if ok != true{
		docSeen[values[i]] = 1
		}else{
		docSeen[values[i]] = val +1
		}
        }
	keys := make([]string, len(docSeen))
	i := 0
	for k, _ := range docSeen {
        keys[i] = k
	i++
    	}
    	sort.Strings(keys)
	answer := strconv.Itoa(len(docSeen)) + " "
	for i:=0;i<len(keys);i++{
	answer = answer +keys[i]+","
	}
	return answer[:len(answer)-1]
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
